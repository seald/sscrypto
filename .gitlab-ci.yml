cache:
  key: "sscrypto" # universal cache
  paths:
    - .npm/

before_script:
  - npm ci --cache .npm --prefer-offline
  - echo "//registry.npmjs.org/:_authToken=${NPM_REGISTRY_TOKEN}" > .npmrc

.test-node: &test-node
  stage: test
  script:
    - npm run coverage
  artifacts:
    name: "sscrypto_coverage_${CI_BUILD_ID}_${CI_BUILD_REF}"
    when: always
    expire_in: 1 mos
    paths:
      - coverage/
    reports:
      junit: test-results/*.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage/*/cobertura-coverage.xml

test-node-10:
  image: node:10
  <<: *test-node

test-node-12:
  image: node:12
  <<: *test-node

test-node-14:
  image: node:14
  <<: *test-node

test-node-16:
  image: node:16
  <<: *test-node

test-browser:
  image: nexus-docker.tardis.seald.io/seald/docker-browser-testing:CHROME_94
  stage: test
  script:
    - npm run test-browser
  artifacts:
    reports:
      junit: test-results/*.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage/*/cobertura-coverage.xml

test-saucelabs:
  image: node:14
  stage: test
  script:
    - npm run test-saucelabs
  artifacts:
    reports:
      junit: test-results/*.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage/*/cobertura-coverage.xml
  when: manual

deploy:
  image: node:14
  stage: deploy
  script:
    - npm run prepublishOnly
    - if (npx semver $CI_COMMIT_TAG --range '>0.0.0'); then NPM_TAG=latest; else NPM_TAG=beta; fi; # Using the fact that semver by default considers that pre-releases do not respect stable ranges
    - npm publish --tag=$NPM_TAG --access public
  only:
    - tags
